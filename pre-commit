#!/usr/bin/env ruby

class Parser
  def initialize
    result = system 'git rev-parse --verify HEAD >/dev/null 2>&1'
    @output = result ? `git diff --cached --check` : `git diff --cached --check 4b825dc642cb6eb9a060e54bf8d69288fbee4904`
  end

  def exists_problem_files?
    @output.any?
  end

  def problem_files
    files = {}
    lines = @output.lines.to_a.delete_if { |line| /^\+/ =~ line }
    lines.each do |line|
      filename = parse_filename(line)
      files[filename] = { :lines => [], :flag => false } unless files.has_key? filename
      line.include? "whitespace" ? files[filename][:lines] << parse_lineno(line) : files[filename][:flag] = true
    end
    files
  end

  private

  def parse_filename(string)
    string.scan(/[\w\/\.]+/)[0]
  end

  def parse_lineno(string)
    string.scan(/\d+:/)[0].chop.to_i
  end
end

class TrailingSpacesRemover
  def from(files)
    files.each_key do |filename|
      l = File.readlines(filename).to_a.insert(0, nil)
      bad_file = files[filename]
      File.open(filename, 'w') do |f|
        bad_file[:lines].each { |num| l[num].rstrip!.concat("\n") }
        if bad_file[:flag]
          index = l.length - 1
          while l[index] == "\n"
            l.delete_at(index)
            index -= 1
          end
        end
        f.print l
      end
    end
    files.keys
  end

  def add_to_index(files)
    files = files.join(' ')
    system "git add #{files}"
  end
end

parser = Parser.new
trailing_spaces_remover = TrailingSpacesRemover.new

if parser.exists_problem_files?
  problem_files = parser.problem_files
  good_files = trailing_spaces_remover.from problem_files
  trailing_spaces_remover.add_to_index good_files
end